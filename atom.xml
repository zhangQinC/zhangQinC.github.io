<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhang&#39;s blog</title>
  
  <subtitle>blog</subtitle>
  <link href="https://zhangqinc.github.io/atom.xml" rel="self"/>
  
  <link href="https://zhangqinc.github.io/"/>
  <updated>2022-08-06T02:02:41.183Z</updated>
  <id>https://zhangqinc.github.io/</id>
  
  <author>
    <name>Zhang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java中参数数量可变的方法</title>
    <link href="https://zhangqinc.github.io/2022/08/06/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0-md/"/>
    <id>https://zhangqinc.github.io/2022/08/06/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0-md/</id>
    <published>2022-08-06T01:57:29.000Z</published>
    <updated>2022-08-06T02:02:41.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java中可以提供参数数量可变的方法"><a href="#Java中可以提供参数数量可变的方法" class="headerlink" title="Java中可以提供参数数量可变的方法"></a>Java中可以提供参数数量可变的方法</h2><p>即变参（<code>varargs</code>）方法</p><p>比如：经典的<code>printf</code>方法。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%d&quot;</span>, n);</span><br><span class="line">System.out.printf(<span class="string">&quot;%d,%s&quot;</span>,n,<span class="string">&quot;abcd&quot;</span>);</span><br></pre></td></tr></table></figure><p>上面两条语句调用同一个方法，但一个调用有两个参数，一个有三个参数。</p><p>或许我们可以讲<code>printf</code>重载，但是如果我们需要给<code>printf</code>传递，更多参数呢，十个，十五个？</p><p><code>printf</code>方法是这样定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrintStream</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> PrintStream <span class="title function_">printf</span><span class="params">(String fmt, Object... args)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> format(fmt, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的省略号(<code>...</code>)是Java代码的一部分，表示这个方法可以接收任意个该类型的 数据。</p><blockquote><p>实际上，<code>printf</code>接受两个参数，一个是格式化字符串，一个是Object[]数组，</p><p>其实，Object数组存放着其他所有传递的参数。（若是基本数据类型，就会自动的装箱）</p></blockquote><p>这就是Java中可变参数的特性，它可以让我们为方法定义一个可变长度的参数。以避免需要同时重载 传递1-10个参数的方法，甚至更多。</p><p>当我们将参数定义为可变的，在调用方法时，<strong>会将传递的多个同类型的参数存入一个数组中</strong>，也就是说，我们<strong>也可以直接将一个数组传给方法</strong>。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">&quot;%d %s&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[] &#123;<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1</span>),abc&#125;);</span><br></pre></td></tr></table></figure><p>下面是一个自定义的有可变参数的方法，计算若干个数中最大值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">max</span><span class="params">(<span class="type">double</span>... values)</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">largest</span> <span class="operator">=</span> Double.NEGATIVE_INFINITY;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">double</span> e: values)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v &gt; largest)&#123;</span><br><span class="line">            largest = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> largest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用上述方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">double</span> <span class="variable">m</span> <span class="operator">=</span> max&#123;<span class="number">1</span>, <span class="number">2.4</span>, <span class="number">3.4</span>&#125;;</span><br><span class="line"><span class="comment">// 编译器会将new double[]&#123;1, 2.4, 3.4&#125;传给max方法</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java中可以提供参数数量可变的方法&quot;&gt;&lt;a href=&quot;#Java中可以提供参数数量可变的方法&quot; class=&quot;headerlink&quot; title=&quot;Java中可以提供参数数量可变的方法&quot;&gt;&lt;/a&gt;Java中可以提供参数数量可变的方法&lt;/h2&gt;&lt;p&gt;即变参（&lt;c</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
    <category term="Core Java" scheme="https://zhangqinc.github.io/tags/Core-Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中super关键字的用法</title>
    <link href="https://zhangqinc.github.io/2022/07/31/super/"/>
    <id>https://zhangqinc.github.io/2022/07/31/super/</id>
    <published>2022-07-31T10:21:06.000Z</published>
    <updated>2022-07-31T10:21:50.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="super的作用"><a href="#super的作用" class="headerlink" title="super的作用"></a>super的作用</h1><p><strong>super 可以用来调用父类中的方法或构造器</strong></p><h1 id="调用父类中的方法："><a href="#调用父类中的方法：" class="headerlink" title="调用父类中的方法："></a>调用父类中的方法：</h1><p><strong>若父类中的某些方法对子类不适用。即可以在子类中提供一个新的方法来覆盖&#x2F;重写（override）父类中的这个方法</strong></p><p>eg：<code>Manager</code> 方法继承了 <code>Employee</code> 方法,现在，现在要在子类中重写父类中的<code>getSalary</code>方法（获取私有字段salary的值）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;      </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> salary + bonus;<span class="comment">// won&#x27;t work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样是不行的，因为只有 <code>Employee</code> 方法能直接访问 <code>Employee</code> 类的私有字段。所以 <code>Manager</code> 类的<code>getSalary</code> 方法不能直接访问 <code>salary</code> 字段 </p><ul><li><p>如果 <code>Manager</code> 类要访问其父类中的私有字段，就要像其他方法一样使用公共接口， 在这里的话就是要使用<code>Employee</code> 类中的公共方法<code>getSalary</code> </p></li><li><p>现在：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getSalary</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">baseSalary</span> <span class="operator">=</span> getSalary();<span class="comment">//still won&#x27;t work</span></span><br><span class="line">    <span class="keyword">return</span> baseSalary + bonus;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还是有问题的，因为它调用<code>getSalary()</code> 方法时是在调用<code>Manager</code>类中的方法（调用自身）。</p></li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>为解决上述问题，可以使用特殊的关键字<code>super</code></p><p>super 可以使我们调用父类中的方法。</p><p><strong><code>super.getSalary();</code></strong></p><p><strong>此语句调用的是<code>Employee</code>类中的<code>getSalary</code>方法</strong></p><p><del>super 与this 不一样，因为super不是一个对象引用</del></p><h1 id="super调用父类的构造器"><a href="#super调用父类的构造器" class="headerlink" title="super调用父类的构造器"></a>super调用父类的构造器</h1><p>例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">(String name, <span class="type">double</span> salary. <span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span>&#123;</span><br><span class="line">    <span class="built_in">super</span>(name, salary, year, month, day);</span><br><span class="line">    bonus = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里的super语句表示调用父类中有对应参数类型的构造器</strong></p><blockquote><p>如果子类的构造器没有显式的调用父类的构造器，将自动调用父类的无参构造器，若此时父类中没有无参构造器就会报错</p></blockquote><p>注：</p><blockquote><p>this的两个含义:</p><ol><li>指示隐式参数的引用</li><li>调用该类的其他构造器</li></ol><p>super的两个含义：</p><ol><li>调用超类的方法</li><li>调用超类的构造器</li></ol></blockquote><hr><p>内容自《Java核心技术卷I》 第五章 继承</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;super的作用&quot;&gt;&lt;a href=&quot;#super的作用&quot; class=&quot;headerlink&quot; title=&quot;super的作用&quot;&gt;&lt;/a&gt;super的作用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;super 可以用来调用父类中的方法或构造器&lt;/strong&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="https://zhangqinc.github.io/2022/07/31/singleton/"/>
    <id>https://zhangqinc.github.io/2022/07/31/singleton/</id>
    <published>2022-07-31T09:03:14.000Z</published>
    <updated>2022-07-31T09:08:39.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p>当我们的一个类需要要求他最多只有一个对象时，即需要确保此类只有一个实例存在时，需要使用到单例模式。</p><blockquote><p>顾名思义，’’单例’’,即只有一个实例的情况。</p></blockquote><p>要使用单例模式就必然要禁止外界随意创建类的对象，我们都知道，在将构造器私有化之后，外界即不可通过构造函数来创建类对应的对象。所以使用单例模式的第一步：</p><ol><li><strong>将构造函数私有化，以避免外界随意将该类实例化。</strong></li></ol><p>既然不能够从外部通过构造器来对类进行实例化，我们就需要从内部创建该类的对象并提供一个能够返回对象的方法，即第二步：</p><ol start="2"><li><strong>通过静态方法从内部创建该类对象并返回。（调用此方法即可获取类的对象</strong>）</li></ol><p>单例模式在Java中通常有两种表现形式。</p><ul><li>懒汉式</li><li>饿汉式</li></ul><h2 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h2><p>第一次引用类是才进行对象实例化，即在调用的<code>getInstance()</code>方法块中创建类的对象再返回。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>节约内存</li></ul><h3 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>有线程安全问题</li></ul><h2 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h2><p>定义对象变量时就将其初始化，在类加载时就进行对象的实例化，当调用<code>getInstance()</code>方法时返回该对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h3><ul><li>线程安全，提前加载到内存</li></ul><h3 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h3><ul><li>提前加载到内存，资源占用</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h1&gt;&lt;p&gt;当我们的一个类需要要求他最多只有一个对象时，即需要确保此类只有一个实例存在时，需要使用到单例模式。&lt;/p&gt;
&lt;blockqu</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
    <category term="面试题" scheme="https://zhangqinc.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>异常处理</title>
    <link href="https://zhangqinc.github.io/2022/07/31/throwable/"/>
    <id>https://zhangqinc.github.io/2022/07/31/throwable/</id>
    <published>2022-07-31T04:00:02.000Z</published>
    <updated>2022-08-06T02:00:53.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中的异常处理"><a href="#Java中的异常处理" class="headerlink" title="Java中的异常处理"></a>Java中的异常处理</h1><p>在Java中，如果某个方法不能够采用正常的途径完成它的任务，可以通过另外一个路径退出方法。</p><p>在这种情况下，方法并不返回任何值，而是抛出（throw）一个封装了错误信息的对象。</p><blockquote><p>注意，这个方法会立刻退出，并不返回任何值。</p><p>此外，也不会从调用这个方法的代码继续执行，取而代之的是，异常处理机制开始搜索能够处理这种异常状况的异常处理器（exception handler）。</p></blockquote><h1 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h1><p>异常对象都是派生于<code>Throwable</code>类的</p><p>如果Java中内置的异常类不能满足要求，我们还可以创建自己的异常类。</p><p><img src="D:\Blog\blog\source_posts\image-20220729145717500.png" alt="image-20220729145717500"></p><ul><li>Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误，这是很严重的错误。</li><li>而Exception层次结构是代表了异常类。这是要重点关注的。</li></ul><p>Exception又大概分为两个分支:</p><ul><li><p>派生于<code>RuntimeException</code>的异常</p></li><li><p>其他异常。</p><p>如果程序本身没有问题，但由于像I&#x2F;O错误这种问题导致的异常属于其他异常。</p></li></ul><p><strong>如果出现<code>RuntimeException</code>异常，那么一定是你的问题（代码问题）</strong></p><blockquote><p>Java语言规范将派生于<code>Error</code>类或者<code>RuntimeException</code>类的所有异常称为<strong>非检查型（&#96;&#96;unchecked<code>）异常**。所有的其他异常称为**检查型（</code>checked&#96;）异常</strong>.</p></blockquote><hr><p>异常处理：两种方案</p><ul><li>抛出异常（throws）</li><li>捕获异常（catch）</li></ul><h1 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h1><p>要在方法首部指出这个方法可能抛出一个异常，所以要修饰方法首部。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a)</span> <span class="keyword">throws</span> RuntimeException&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此方法抛出了一个RuntimeException异常。</span></span><br><span class="line"><span class="comment">// 此方法运行时可能会出错而抛出一个RuntimeException包括它的子类。</span></span><br></pre></td></tr></table></figure><h1 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h1><p>有些代码必须捕获异常，捕获异常需要做更多的规划。</p><blockquote><p>如果发生了某个异常，但没有在任何地方捕获它，程序就会终止。</p></blockquote><p><strong>想要捕获一个异常，需要使用<code>try/catch</code>语句块。</strong></p><p>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">// code</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (ExceptionType e)&#123;</span><br><span class="line">    <span class="comment">// handler for this type</span></span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 一定执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>如果try语句块中的任何代码抛出了catch子句中指定的一个异常类，则：</p><ul><li>程序将跳过try语句块的其余代码。</li><li>程序将执行catch子句中的代码。</li></ul></li><li><p>如果try语句块中的代码没有抛出任何异常，那么程序将跳过catch子句。</p></li><li><p>finally中的语句一定执行，如回收资源，关闭流等操作</p></li></ul><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><p>&#x2F;&#x2F;TODO</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中的异常处理&quot;&gt;&lt;a href=&quot;#Java中的异常处理&quot; class=&quot;headerlink&quot; title=&quot;Java中的异常处理&quot;&gt;&lt;/a&gt;Java中的异常处理&lt;/h1&gt;&lt;p&gt;在Java中，如果某个方法不能够采用正常的途径完成它的任务，可以通过另外一个</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>抽象类与接口简介整理</title>
    <link href="https://zhangqinc.github.io/2022/07/25/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%AE%80%E4%BB%8B%E6%95%B4%E7%90%86/"/>
    <id>https://zhangqinc.github.io/2022/07/25/%E6%8A%BD%E8%B1%A1%E7%B1%BB%E4%B8%8E%E6%8E%A5%E5%8F%A3%E7%AE%80%E4%BB%8B%E6%95%B4%E7%90%86/</id>
    <published>2022-07-25T10:29:04.000Z</published>
    <updated>2022-07-25T10:29:04.950Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>JDK环境配置</title>
    <link href="https://zhangqinc.github.io/2022/07/25/JDK%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://zhangqinc.github.io/2022/07/25/JDK%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2022-07-25T10:16:39.000Z</published>
    <updated>2022-07-25T10:25:27.386Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><p><strong>Write once，run anywhere</strong></p><p>主要用于web开发</p><ul><li><p>jdk: Java Development Kit</p><p>java开发工具</p></li><li><p>jre: java Runtime Environment</p><p>java运行环境</p></li><li><p>jvm: java Virtual Machine</p><p>java虚拟机</p></li></ul><h2 id="java环境变量配置"><a href="#java环境变量配置" class="headerlink" title="java环境变量配置"></a>java环境变量配置</h2><p>JAVA_HOME 对应路径为jdk的安装目录</p><p>配置path变量 <code>%JAVA_HOME%\bin</code> %%是指引用路径，即，jdk下的bin目录</p><p><code>%JAVA_HOMOE%\jre\bin</code> </p><p>都对应的是真实的目录</p><h2 id="测试jdk是否安装成功"><a href="#测试jdk是否安装成功" class="headerlink" title="测试jdk是否安装成功"></a>测试jdk是否安装成功</h2><p>cmd中，java -version 查看jdk版本信息—&gt;查看成功即安装ok。</p><h2 id="了解jdk目录"><a href="#了解jdk目录" class="headerlink" title="了解jdk目录"></a>了解jdk目录</h2><ul><li>bin 放一些可执行程序，还有一些运行工具</li><li>include 因为是c编写的，在启动时需要去引入一些c的头文件</li><li>jre Java运行环境</li><li>lib Java一些类库文件</li><li>src 一些资源文件，一些源代码。。</li></ul><h2 id="如何手动编译运行Java代码文件"><a href="#如何手动编译运行Java代码文件" class="headerlink" title="如何手动编译运行Java代码文件"></a>如何手动编译运行Java代码文件</h2><blockquote><ol><li>编写后在该目录打开cmd窗口</li><li>执行命令<code>javac 文件名.java</code>（生成了class文件）</li><li>执行命令 <code>java 文件名</code> （运行了class文件）</li></ol></blockquote><h2 id="程序运行机制"><a href="#程序运行机制" class="headerlink" title="程序运行机制"></a>程序运行机制</h2><ul><li><p>编译型 -&gt; 操作 系统 c&#x2F;c++</p></li><li><p>解释型 -&gt; 网页，速度</p><ul><li>各有利弊</li></ul></li><li><p>程序运行机制</p></li></ul><h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><ul><li>集成开发环境，用于提供程序开发环境的软件，将开发过程中需要使用的各种功能（开发、运行、打包、测试、项目管理、连接。。。）工具整合为一个统一的软件，IDE</li></ul><p>IDEA </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java&quot;&gt;&lt;a href=&quot;#Java&quot; class=&quot;headerlink&quot; title=&quot;Java&quot;&gt;&lt;/a&gt;Java&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Write once，run anywhere&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要用于web开发&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>面向对象程序设计简概</title>
    <link href="https://zhangqinc.github.io/2022/07/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AE%80%E6%A6%82/"/>
    <id>https://zhangqinc.github.io/2022/07/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AE%80%E6%A6%82/</id>
    <published>2022-07-25T10:02:15.000Z</published>
    <updated>2022-07-25T10:06:12.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-1-面向对象程序设计概述"><a href="#4-1-面向对象程序设计概述" class="headerlink" title="4.1 面向对象程序设计概述"></a>4.1 面向对象程序设计概述</h1><h2 id="4-2-1-对象与对象变量"><a href="#4-2-1-对象与对象变量" class="headerlink" title="4.2.1 对象与对象变量"></a>4.2.1 对象与对象变量</h2><p>Java中，要想使用变量，首先必须先构造对象，并指定其初始状态（初始化），然后对对象应用方法。</p><h3 id="对象和对象变量的重要区别"><a href="#对象和对象变量的重要区别" class="headerlink" title="对象和对象变量的重要区别"></a>对象和对象变量的重要区别</h3><p><code>Date deadline;</code></p><p>定义了一个对象变量deadline，它可以引用Date类型的对象，但它不是一个对象，所以此时还不能在其上使用任何Date方法。</p><p><strong>此时可以让它引用一个新构造的对象或者一个已存在的对象</strong></p><p><code>deadline = new Date();</code></p><p><code>deadline = birthday;</code></p><blockquote><p><em><strong>对象变量并没有实际包含一个对象，它只是引用一个对象</strong></em></p><blockquote><p>相当于一个指针</p></blockquote><p>Java中，任何对象变量的值都是对存储在另一个地方的某个对象的引用，new操作符的返回值也是一个引用。</p></blockquote><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><blockquote><p>Java中没有类就无法做任何事情</p></blockquote><p>要想使用对象，首先必须构造对象，并指定其初始状态，然后再对对象应用方法。</p><p><em>Java中，要使用构造器（constructor）构造新实例。</em></p><h3 id="构造器定义"><a href="#构造器定义" class="headerlink" title="构造器定义"></a>构造器定义</h3><p><em><strong>构造器是一种用来构造并初始化对象的特殊方法。</strong></em></p><blockquote><p>java用类描述时间，这样的话，如果类设计的不完善，不符合使用者的要求，其他程序员就要很容易的修改、编写自己的类，以便增强或替代系统提供的类。</p></blockquote><h3 id="构造器的结构及特性"><a href="#构造器的结构及特性" class="headerlink" title="构造器的结构及特性"></a>构造器的结构及特性</h3><ol><li>构造器的名字应该和类名一致</li><li>要构造一个对象需要在构造器前面加new操作符</li></ol><blockquote><p>eg : new Date()</p></blockquote><p><strong>如果需要的话，也可以将这个对象传给一个方法</strong></p><blockquote><p>eg : <code>System.out.println(new Date());</code></p></blockquote><p><strong>也可以直接对刚创建的对象应用一个方法</strong></p><ul><li>Date类中的toString方法将返回日期的字符串描述</li></ul><blockquote><p><code>String s = new Date().toString();</code></p></blockquote><p><em><strong>以上两个构造对象都仅仅使用了一次。而一般情况下，需要将构造对象使用多次，就需要将对象存在一个变量中。</strong></em>、</p><blockquote><p><code>Date birthday = new Date();</code></p></blockquote><ul><li>构造器与类同名</li><li>每个类可以有一个以上的构造器（类似于重载）</li><li>构造器可以有0个，1个或多个参数（任意个）</li><li>构造器没有返回值</li><li>构造器总是伴随着new操作符一起调用</li></ul><h2 id="4-3-5-用var声明局部变量"><a href="#4-3-5-用var声明局部变量" class="headerlink" title="4.3.5 用var声明局部变量"></a>4.3.5 用var声明局部变量</h2><p>Java 10 中，若可从变量的初始值推导出他的类型，就可以用var关键字，声明局部变量，无需指定类型</p><p>eg：</p><p><code>Employee harry = new Employee(&quot;Harry Hacker&quot;, 50000, 1989,10,1);</code></p><p>只需</p><p><code>var harry = new Employee(&quot;Harry Hacker&quot;, 50000, 1989,10,1);</code></p><blockquote><p>不会对数值类型使用var 如int、long、double等</p></blockquote><ul><li>var关键字只能用于方法中的局部变量，而参数和字段的类型必须声明。</li></ul><h2 id="4-3-6-使用null引用"><a href="#4-3-6-使用null引用" class="headerlink" title="4.3.6 使用null引用"></a>4.3.6 使用null引用</h2><ul><li><p>一个对象变量包含一个对象的引用，或者包含一个特殊的null值用来表示没有引用任何对象。</p></li><li><p>如果对null值应用一个方法，会产生一个NullPointerException异常</p></li><li><blockquote><p>且正常情况下，程序并不会捕获这些异常</p></blockquote></li></ul><h2 id="4-3-7-隐式参数和显示参数"><a href="#4-3-7-隐式参数和显示参数" class="headerlink" title="4.3.7 隐式参数和显示参数"></a>4.3.7 隐式参数和显示参数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> byPercent)</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">raise</span> <span class="operator">=</span> salary * byPercent / <span class="number">100</span>;</span><br><span class="line">    salary += raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>raiseSalary 方法有两个参数。</p><ul><li>第一个参数为隐式（implicit）参数，是出现在方法名前的Employee类型的对象。（有人把隐式参数称为方法调用的目标或接收者）。</li><li>第二个参数是位于方法名后面括号中的数值，即显式（explicit）参数。</li></ul><blockquote><p>显式参数显式的列在方法声明中</p><p>隐式参数没有出现在方法声明中</p></blockquote><p><em><strong>在每一个方法中，关键字this 指示隐式参数。即：</strong></em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">raiseSalary</span><span class="params">(<span class="type">double</span> byPercent)</span>&#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">raise</span> <span class="operator">=</span> <span class="built_in">this</span>.salary * byPercent / <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.salary += raise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-8-封装的优点"><a href="#4-3-8-封装的优点" class="headerlink" title="4.3.8 封装的优点"></a>4.3.8 封装的优点</h2><ul><li>数据字段均设为私有的</li><li>一个公共的字段访问器方法（Getter）</li><li>一个公共的字段更改器方法（Setter）</li></ul><blockquote><p><em><strong>注：不要编写返回可变对象引用的访问器方法</strong></em></p></blockquote><h2 id="4-3-9-基于类的访问权限"><a href="#4-3-9-基于类的访问权限" class="headerlink" title="4.3.9 基于类的访问权限"></a>4.3.9 基于类的访问权限</h2><ul><li><p>方法可以访问调用这个方法的对象的私有数据</p></li><li><blockquote><p>一个方法可以访问所属类的<em><strong>所有</strong></em>对象的私有数据</p></blockquote></li></ul><h2 id="4-3-10-私有方法"><a href="#4-3-10-私有方法" class="headerlink" title="4.3.10 私有方法"></a>4.3.10 私有方法</h2><blockquote><p>公共数据非常危险，所以应该将所有的数据字段都设置为私有的</p></blockquote><ul><li><p>使用private设置方法为私有</p></li><li><p>只要方法是私有的，类的设计者就可以确信它不会在别处使用，所以可以不用时删除</p></li><li><blockquote><p>如果一个方法是公共的，就不能简单的将其删除，因为可能会有其他的代码依赖这个方法。</p></blockquote></li></ul><h2 id="4-3-11-final-实例字段"><a href="#4-3-11-final-实例字段" class="headerlink" title="4.3.11 final 实例字段"></a>4.3.11 final 实例字段</h2><ul><li>在定义实例字段时候可以将其定义为final</li></ul><p>eg： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>这样的字段必须在构造对象时初始化</strong></em></p><p><em>即确保在每一个构造器执行之后，这个设置为final的字段的值已经被设置，且不能再更改</em></p><blockquote><p>因为再对象构造之后，这个值不会再改变，所以没有setName方法</p></blockquote><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ul><li>用于类型为基本类型或者不可变类的字段（类中的所有方法都不会改变其对象，这样的类就是不可变的类).如：String类就是不可变类</li></ul><h1 id="4-4-静态字段和静态方法"><a href="#4-4-静态字段和静态方法" class="headerlink" title="4.4 静态字段和静态方法"></a>4.4 静态字段和静态方法</h1><h2 id="4-4-1-静态字段"><a href="#4-4-1-静态字段" class="headerlink" title="4.4.1 静态字段"></a>4.4.1 静态字段</h2><blockquote><p>如果将一个字段定义为static ，每个类只有一个这样的字段</p><p>而对于非静态的实例字段，每个对象都有自己的一个副本</p><ul><li>eg:若需要给每一个员工赋予唯一的标识码，这里添加一个实例字段id和一个静态字段nextId；</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">nextId</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>设置为static之后，所有的Employee类的实例将共享一个此字段，即，每一个Employee对象都有属于自己的实例字段id，但是它们只有一个静态字段nextId，且即使还没有Employee对象，但是静态字段nextId仍然存在。即，它属于这整个类，而不是单独属于类的某个对象。</strong></em></p><blockquote><p>在一些面向对象程序设计语言中，静态字段被称为<em>类字段</em>。静态二字只是沿用了C++的叫法，而没有实际意义。</p></blockquote><h2 id="4-4-2-静态常量"><a href="#4-4-2-静态常量" class="headerlink" title="4.4.2 静态常量"></a>4.4.2 静态常量</h2><blockquote><p>静态变量使用的比较少，但静态常量很常用</p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Math</span>&#123;</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">double</span> <span class="variable">PI</span> <span class="operator">=</span> <span class="number">3.14159265358979</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><p>在程序中可以用Math.PI来访问这个常量</p><ul><li>若省略关键字static，PI就变成了Math类的一个实例字段，而成为实例字段之后就需要通过Math的一个对象来访问PI，并且每一个Math对象都有它自己的一个副本。</li></ul><p><em><strong>最好不要有公共字段，但是公共常量（final字段）却完全可以有，因为其被声明为final，所以不允许被重新赋值。</strong></em></p><blockquote><p>注：System类中有一个setOut方法可以将System.out 设置为不同的流，而改变了final变量的值。这里用了一个原生方法。</p><p>原生方法是一种特殊的解决方法，可以绕过 Java 语言的访问控制机制。</p></blockquote><h2 id="4-4-3-静态方法"><a href="#4-4-3-静态方法" class="headerlink" title="4.4.3 静态方法"></a>4.4.3 静态方法</h2><ul><li><p>静态方法是不在对象上执行的方法</p></li><li><blockquote><p>eg: </p><p>Math类的pow方法就是一个静态方法</p><p>使用此方法时并不使用任何Math对象，也就是说它没有隐式参数。即没有this参数的方法。</p></blockquote><p><em><strong>Employee 类的静态方法不能访问 id 实例字段，因为他不能在对象上执行操作。但是静态方法可以刚问静态字段</strong></em>、</p><p>eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getNextId</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nextId; <span class="comment">// returns static field</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以提供类名来调用这个方法：</li></ul><p><code>int n = Employee.getNextId();</code></p><p><em><strong>若省略了关键字 static 就需要通过 Employee 类对象的引用来调用这个方法</strong></em></p></li></ul><blockquote><p>若使用对象调用静态方法也是合法的，但是这种写法容易混淆，所以最好使用类名来调用静态方法，而不是使用对象。</p></blockquote><h3 id="使用静态方法的情况"><a href="#使用静态方法的情况" class="headerlink" title="使用静态方法的情况"></a>使用静态方法的情况</h3><ol><li>方法不需要访问对象状态，因为他需要的所有参数都通过显式参数提供（eg：<code>Math.pow</code>）</li><li>方法只需要访问类的&#x3D;&#x3D;静态字段&#x3D;&#x3D;（eg：<code>Employee.getNextId</code>）</li></ol><blockquote><p>可以调用静态方法而不需要任何对象，eg：不需要构造<code>Math</code>类的任何对象就可以调用<code>Math.pow</code></p></blockquote><h2 id="4-4-4-工厂方法"><a href="#4-4-4-工厂方法" class="headerlink" title="4.4.4 工厂方法"></a>4.4.4 工厂方法</h2><p>即静态方法的另一种用途：<em><strong>静态工厂方法</strong></em></p><p>类似于 <code>LocalDate</code> 和<code>NumberFormat</code> 的类使用静态工厂方法（factory method）来构造对象。</p><ul><li>如工厂方法<code>LocalDate.now</code>和<code>LocalDate.of</code></li></ul><p><em>特性及优点</em></p><h2 id="4-4-5-main方法"><a href="#4-4-5-main方法" class="headerlink" title="4.4.5 main方法"></a>4.4.5 main方法</h2><blockquote><p>main 方法也是一个静态方法</p><ul><li>main方法不对任何对象进行操作。</li><li>在启动程序时还没有任何对象，而静态的main方法将执行并构造程序所需要的对象</li></ul><blockquote><p><strong>每一个类都可以有一个main方法</strong>，这是常用于对类进行单元测试的一个技巧</p><ul><li>如，可以在 Employee 类中添加一个 main 方法，见程序4-3</li></ul></blockquote></blockquote><h3 id="程序清单4-3-StaticTest"><a href="#程序清单4-3-StaticTest" class="headerlink" title="程序清单4-3 StaticTest"></a>程序清单4-3 <code>StaticTest</code></h3><h1 id="4-5-方法参数"><a href="#4-5-方法参数" class="headerlink" title="4.5 方法参数"></a>4.5 方法参数</h1><p>如何将参数传递给方法的一些专业术语：</p><ul><li><p><strong>安置调用</strong>（call by value）表示方法接收的是调用者提供的值</p></li><li><p><strong>按引用调用</strong>（call by reference)表示方法接收的是调用者提供的变量地址</p></li><li><blockquote><p>方法可以修改按引用传递的变量的值，但是不能修改按值传递的变量的值。</p></blockquote><p>“按……调用”（call by）是一个标准的计算机科学术语，用来描述各种程序设计语言中方法参数的传递方式。</p><p>实际上还有按名调用，但是这种传递方式已经成为历史</p></li></ul><p><em><strong>Java 总是采用按值调用</strong></em>，也就是说，方法得到的是所有参数值的一个<strong>副本</strong>。</p><p>所以方法<strong>不能修改</strong>传递给它的任何参数变量的内容。</p><p>而<strong>参数类型</strong>有<strong>两种</strong>：</p><ol><li>基本数据类型（布尔、数值）</li><li>对象引用</li></ol><blockquote><p>一个方法不可能修改基本数据类型的参数，但可以修改对象引用的参数</p><ul><li><strong>虽然方法通过参数得到的是一个对象引用的副本，但是原来的对象引用和此副本引用的是同一个对象</strong></li></ul></blockquote><p>eg：利用下面这个方法将一个员工的工资增长至三倍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tripleSalary</span><span class="params">(Employee x)</span>&#123;</span><br><span class="line">    x.raiseSalary(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">harry = <span class="keyword">new</span> <span class="title class_">Employee</span>(...);</span><br><span class="line">tripleSalary(harry);</span><br></pre></td></tr></table></figure><p>具体的执行过程为:</p><ol><li>x初始化为harry值的一个副本，这里就是一个对象引用</li><li><code>raiseSalary</code>方法应用于这个对象引用。x和harry同时引用的那个Employee对象的工资提高了200%</li><li>方法结束后，参数变量x不再使用，然后对象变量harry继续引用那个工资增长至三倍的员工对象</li></ol><h2 id="Java语言对对象采用的并不是按引用调用的参数传递方式"><a href="#Java语言对对象采用的并不是按引用调用的参数传递方式" class="headerlink" title="Java语言对对象采用的并不是按引用调用的参数传递方式"></a>Java语言对对象采用的并不是按引用调用的参数传递方式</h2><blockquote><p>很多人都认为Java采用的引用调用（甚至有些书的作者）</p></blockquote><p>反例：</p><ul><li>首先编写一个交换两个Employee对象的方法；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">swap</span><span class="params">(Employee x, Employee y)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">temp</span> <span class="operator">=</span> x;</span><br><span class="line">    x = y;</span><br><span class="line">    y = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>若Java对对象采用的是按引用调用，那么这个方法可以实现调换</strong></p><p>但是：</p><blockquote><p>此方法并没有改变存储在变量中的对象引用。而是交换了两个副本。<strong>因为&#96;&#96;swap&#96;方法的参数 x 和 y 被初始化为两个对象引用的副本</strong>。</p><ul><li><strong>实际上对象引用时按值传递的</strong></li></ul></blockquote><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>（Java中对方法参数能做什么和不能做什么）</p><ol><li>方法不能修改基本数据类型的参数</li><li>方法可以改变对象参数的状态</li><li>方法不能让一个对象参数引用一个新的对象</li></ol><h2 id="Demo：程序清单-4-4"><a href="#Demo：程序清单-4-4" class="headerlink" title="Demo：程序清单 4-4"></a>Demo：程序清单 4-4</h2><p><code>ParamTest</code></p><h1 id="4-6-对象的构造"><a href="#4-6-对象的构造" class="headerlink" title="4.6 对象的构造"></a>4.6 对象的构造</h1><p><em><strong>构造器可以定义对象的初始状态，但是由于对象构造非常重要，所以Java 提供了多种编写构造器的机制</strong></em></p><h2 id="4-6-1-重载"><a href="#4-6-1-重载" class="headerlink" title="4.6.1 重载"></a>4.6.1 重载</h2><blockquote><p><strong>多个方法有相同的名字、不同的参数，即出现了重载。</strong></p><p>此时调用方法时编译器需要通过各个方法首部中的参数类型与特定方法调用中所使用的值类进行匹配来选出正确的方法。</p><ul><li>此过程称为<strong>重载解析</strong>。</li></ul></blockquote><ul><li><em><strong>Java 允许重载任何方法</strong></em></li><li>要完整的描述一个方法，需要指定方法名以及参数类型，这叫方法的签名</li><li>返回类型不是方法签名的一部分，所以不能有两个名字相同、参数类型也相同却有不同返回类型的方法</li></ul><h2 id="4-6-2-默认字段初始化"><a href="#4-6-2-默认字段初始化" class="headerlink" title="4.6.2 默认字段初始化"></a>4.6.2 默认字段初始化</h2><ul><li>如果在构造器中额米有显式的为字段设置初值，那么就会被自动的赋为默认值：（0， null， 或false）</li></ul><p>这也是字段和局部变量的一个重要区别</p><p>-&gt; <strong>方法中发局部变量必须明确的初始化。但是在类中，如果没有初始化类中的字段，将会自动初始化为默认值</strong></p><h2 id="4-6-3-无参数的构造器"><a href="#4-6-3-无参数的构造器" class="headerlink" title="4.6.3 无参数的构造器"></a>4.6.3 无参数的构造器</h2><ul><li>当写一个类时候没有编写构造器，就会自动提供一个无参的构造器</li><li>若设置了构造器，默认给的就无了</li></ul><blockquote><p>通过重载类的构造器方法，可以采用多种形式设置类的实例字段的初始状态</p></blockquote><h2 id="4-6-4-显式字段初始化"><a href="#4-6-4-显式字段初始化" class="headerlink" title="4.6.4 显式字段初始化"></a>4.6.4 显式字段初始化</h2><p>调用构造器，每个实例字段都要设置为一个有意义的初值</p><ul><li><p>可以在类定义中直接为任何字段赋值，如： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果一个类的所有构造器都希望把某个特定的实例字段设置为同一个值，就很有用</li></ul></li></ul><blockquote><p>而初值不一定是常量值，可以利用方法调用初始化一个字段</p></blockquote><p>eg:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> nextId;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> assignId();</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">assignId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> nextId;</span><br><span class="line">        nextId++;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在 C++ 中，不能直接初始化类的实例字段。所有的字段都必须在构造器中设置。</p></blockquote><h2 id="4-6-5-参数名"><a href="#4-6-5-参数名" class="headerlink" title="4.6.5 参数名"></a>4.6.5 参数名</h2><p>编写小构造器命名技巧：</p><ol><li>在每个参数前面加上一个前缀“a”。</li><li>使用关键字 this</li></ol><h2 id="4-6-6-调用另一个构造器"><a href="#4-6-6-调用另一个构造器" class="headerlink" title="4.6.6 调用另一个构造器"></a>4.6.6 调用另一个构造器</h2><p><em><strong>构造器调用同一个类中的另一个构造器</strong></em>，<code>this(/*参数*/)</code></p><ul><li>一个构造器中最多只能调用一个构造器</li><li>必须写在构造器执行体的第一行语句</li><li>使用this调用另一个重载构造器，只能在构造器中使用</li></ul><h2 id="4-6-7-初始化块"><a href="#4-6-7-初始化块" class="headerlink" title="4.6.7 初始化块"></a>4.6.7 初始化块</h2><p>两种初始化数据字段的方法：</p><ul><li>在构造器中设置值</li><li>在声明中赋值</li></ul><p><em><strong>Java还有第三种机制 -&gt; 初始化块（initialization block）</strong></em></p><blockquote><p>在一个类的声明中，可以包含任意多个代码块。只要构造这个类的对象，这些块就会被执行。</p></blockquote><p><strong>调用构造器时，会首先运行初始化块，然后才运行构造器的主体部分</strong></p><p>（这种机制不必需，不常见）</p><h3 id="调用构造器的具体处理步骤"><a href="#调用构造器的具体处理步骤" class="headerlink" title="调用构造器的具体处理步骤"></a>调用构造器的具体处理步骤</h3><ol><li>如果构造器的第一行调用了另一个构造器，则基于所提供的参数执行第二个构造器，否则:</li><li><ol><li>所有数据字段初始化为其默认值</li><li>按照在类声明中出现的顺序，执行所有字段初始化方法和初始化块</li></ol></li><li>执行构造器主体代码</li></ol><h3 id="程序清单-4-5"><a href="#程序清单-4-5" class="headerlink" title="程序清单 4-5"></a>程序清单 4-5</h3><p>其中展示了本节许多特性：</p><ul><li>重载构造器</li><li>用this（…）调用另一个构造器</li><li>无参数构造器</li><li>对象初始化块</li><li>静态初始化块</li><li>实例字段初始化</li></ul><p><a href="https://blog.csdn.net/jeep_ouc/article/details/26412191" title="CSDN"><strong>静态初始化块、初始化块和构造方法的理解</strong></a></p><h2 id="API-java-util-Random"><a href="#API-java-util-Random" class="headerlink" title="API java.util.Random"></a>API java.util.Random</h2><ul><li><p>Random()</p><p>构造一个新的随机数生成器</p></li><li><p>int nextInt(int n)</p><p>返回一个0~n-1之间的随机数</p></li></ul><h2 id="4-6-8-对象析构与-finalize-方法"><a href="#4-6-8-对象析构与-finalize-方法" class="headerlink" title="4.6.8 对象析构与 finalize 方法"></a>4.6.8 对象析构与 finalize 方法</h2><h1 id="4-7-包"><a href="#4-7-包" class="headerlink" title="4.7 包"></a>4.7 包</h1><p>Java允许使用包（package），将类组织在一个集合中，借助包可以方便的组织自己的代码，并将自己的代码与别人提供的代码，库分开管理。</p><h2 id="4-7-1-包名"><a href="#4-7-1-包名" class="headerlink" title="4.7.1 包名"></a>4.7.1 包名</h2><blockquote><p>使用包的主要原因是要确保类名的唯一性</p><p>即同名类放在不同包中就不会产生冲突</p><blockquote><p>以域名的逆序的形式作为包名</p></blockquote></blockquote><h2 id="4-7-2-类的导入"><a href="#4-7-2-类的导入" class="headerlink" title="4.7.2 类的导入"></a>4.7.2 类的导入</h2><p><strong>一个类可以使用所属包中的所有类， 以及其他包中的公共类（public class）。</strong></p><p>访问另一个包中的类有两种方式：</p><ul><li><p>完全限定名（fully qualified name)就是包名后面跟着类名</p><p>java.time.LocalDate tofay &#x3D; java.time.LocalDate.now();</p></li><li><p>import 语句。</p><ul><li>可以使用 import 语句导入一个特定的类或整个包，</li><li>import 语句应该位于源文件的顶部（但位于 package 语句的后面）</li></ul><p>import java.time.LocalDate;</p><p><strong>然后就可以使用：</strong></p><p>LocalDate today &#x3D; LocalDate.now();</p></li></ul><p><strong>只能使用“*”导入一个包，而不能使用import java.* 或import java.*.* 导入以java为前缀的所有包</strong></p><blockquote><p>若发生命名冲突就需注意导入的两个包是否有同名类</p><p>可加一个特定的 import 语句来解决:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br></pre></td></tr></table></figure><p>若两个 Date 类都需要使用，可以在类名前加上完整的包名，即使用完全限定名。</p><blockquote><p>在包中定位类是编译器的工作。类文件中的字节码总是使用完整的包名引用其他类。</p></blockquote></blockquote><ul><li>import 和 #include 并没有共同之处</li></ul><h2 id="4-7-3-静态导入"><a href="#4-7-3-静态导入" class="headerlink" title="4.7.3 静态导入"></a>4.7.3 静态导入</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;4-1-面向对象程序设计概述&quot;&gt;&lt;a href=&quot;#4-1-面向对象程序设计概述&quot; class=&quot;headerlink&quot; title=&quot;4.1 面向对象程序设计概述&quot;&gt;&lt;/a&gt;4.1 面向对象程序设计概述&lt;/h1&gt;&lt;h2 id=&quot;4-2-1-对象与对象变量&quot;&gt;&lt;a</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
    <category term="Core Java" scheme="https://zhangqinc.github.io/tags/Core-Java/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的三大特征</title>
    <link href="https://zhangqinc.github.io/2022/07/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/"/>
    <id>https://zhangqinc.github.io/2022/07/25/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</id>
    <published>2022-07-25T09:30:25.000Z</published>
    <updated>2022-07-25T09:32:28.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象的三大特征"><a href="#面向对象的三大特征" class="headerlink" title="面向对象的三大特征"></a>面向对象的三大特征</h1><p>面向对象有三个大特征：</p><ul><li>封装</li><li>继承</li><li>多态</li></ul><blockquote><p>面向对象的三大基本特征都是为了代码重用</p><p>即减少重复性的代码，大大降低程序员的工作量，提高代码的复用率。</p></blockquote><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>封装就是把客观事物封装成（定义成）抽象的类，且隐藏类的属性（对其私有化，使用<code>private</code>修饰符修饰）和实现细节，只对外公开一些接口来实现对指定数据的修改（set）和读取（get）,以及指定功能（方法method）的使用。</p><p>将属性封装起来再提供接口来访问和设置相比提供一个简单的公共数据字段复杂，但是却明显有以下好处：</p><ol><li><p>可以改变内部实现，而除了该类的方法以外，不回应i想其他方法。</p></li><li><p>setter方法可以完成错误检查，即检查传进的参数是否有问题，不符合预期。</p></li><li><p>增强了安全性并简化了编程，</p><blockquote><p>比如我们可以对一个指定属性只设置Getter方法而不设置Setter方法，这样的话，一旦在构造器中设置此字段，就没有任何方法可以对它进行修改</p></blockquote></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承的基本思想是:</p><p>基于已有的类创建新的类。继承已存在的类就是复用（继承）这些类的方法，而且可以增加一些新的方法和字段，使新类能够适应新的情况。</p><blockquote><p>父类抽取出了他所有子类的共性，而每个子类都有都继承了父类的特征（属性和方法），又可以增加属于自己的特征（属性和方法）。</p></blockquote><h3 id="is-a关系"><a href="#is-a关系" class="headerlink" title="is-a关系"></a><code>is-a</code>关系</h3><p><code>is-a</code>关系是继承的一个明显特征。</p><blockquote><p>假如你在某个公司工作，这个公司里的经理和普通员工的待遇存在一些差异，但是也有着很多相同的地方，比如说他们都领工资，但是经理在领完工资后还有奖金，这时就需要继承。</p><p>我们需要为经理定义一个Manager类，继承Employee类，并增加一些新的功能</p></blockquote><p>上述例子中<code>Manager</code>和<code>Employee</code>之间存在着<code>is-a</code>关系。</p><p>Java中，使用<code>extends</code>关键字来表示继承，如下形式来定义继承<code>Employee</code>类的<code>Manager</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Employee</span>&#123;</span><br><span class="line">    added methods and fields.</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字extends"><a href="#关键字extends" class="headerlink" title="关键字extends"></a>关键字extends</h3><p>关键字extends表明正在构造的新类派生于一个已存在的类。</p><p>这个已存在的类称为超类（superclass）、基类（base class）、或者父类（parent class）</p><p>新类称为子类（subclass）、派生类（derived class）或者孩子类（child class）。</p><blockquote><p>尽管Employee类是一个父类，但是他并不比子类拥有更多的功能，相反，子类比父类拥有的功能更多。</p></blockquote><p>通过扩展父类定义子类的时候，只需要指出子类与父类的<strong>不同之处</strong>即可，所以在设计类的时候，应该将最一般的方法放在父类中，而将更特殊的方法放在子类中。</p><p>即，<strong>需要将通用功能抽取到父类</strong></p><h3 id="覆盖方法（Override）"><a href="#覆盖方法（Override）" class="headerlink" title="覆盖方法（Override）"></a>覆盖方法（Override）</h3><p>父类中的有些方法对子类不一定使用，为此需要提供一个新的方法来覆盖&#x2F;重写（Override）父类中的这个方法。</p><p>只需要定义一个与父类中需要重写的方法同名的方法并加上注解<code>@Override</code>即可重写该方法。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><h3 id="阻断继承：final类和方法"><a href="#阻断继承：final类和方法" class="headerlink" title="阻断继承：final类和方法"></a>阻断继承：final类和方法</h3><p><strong>不允许扩展的类</strong>被称为final类。即该类不能作为父类，不允许被继承，或者说不能派生子类。</p><p>在定义类时用<code>final</code>修饰符就表明这个类是<code>final</code>类。</p><p>类中的某个方法也可以被声明为<code>final</code>，这样的话，子类就不能重写该方法。（final类中的所有方法默认为final方法，当然，final类不拥有子类）</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p><code>is-a</code>规则指出子类的每个对象也是父类的对象。例如，每个经理都是员工，反之则不然，并不是每一名员工都是经理。</p><p><code>is-a</code>规则的另一种表述是替换原则。他指出程序中出现父类的任何地方都可以使用子类对象替换。</p><p><strong>可以将子类对象赋给父类变量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Employee e;</span><br><span class="line">e = <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">e = <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line"> <span class="comment">// </span></span><br></pre></td></tr></table></figure><p>在Java中，对象变量是多态的（polymorphic）。</p><p>一个<code>Employee</code>类型的变量，既可以引用一个<code>Employee</code>类型的对象，<strong>也可以引用<code>Employee</code>类的任何一个子类的对象。</strong></p><p>但是不能将父类引用赋给子类变量。</p><blockquote><p>当一个父类变量存放了一个子类引用时，此变量只能够使用父类的方法，而不能使用子类的方法，因为其声明的类型是父类。即不能调用子类新增的扩展的方法和属性。</p><p>但是此时若是子类中相应的重写了父类的方法，则调用的是子类中已经重写的方法。</p></blockquote><h3 id="多态的优点："><a href="#多态的优点：" class="headerlink" title="多态的优点："></a>多态的优点：</h3><ul><li>消除类型之间的耦合关系</li><li>可替换性</li><li>可扩充性</li><li>接口性</li><li>灵活性</li><li>简化性</li></ul><h3 id="多态存在的三个必要条件："><a href="#多态存在的三个必要条件：" class="headerlink" title="多态存在的三个必要条件："></a>多态存在的三个必要条件：</h3><ul><li>继承</li><li>重写（子类继承父类后对父类方法进行重新定义）</li><li>父类引用指向子类对象</li></ul><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象的三大特征&quot;&gt;&lt;a href=&quot;#面向对象的三大特征&quot; class=&quot;headerlink&quot; title=&quot;面向对象的三大特征&quot;&gt;&lt;/a&gt;面向对象的三大特征&lt;/h1&gt;&lt;p&gt;面向对象有三个大特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;封装&lt;/li&gt;
&lt;li&gt;继承&lt;/l</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>接口和抽象类</title>
    <link href="https://zhangqinc.github.io/2022/07/25/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://zhangqinc.github.io/2022/07/25/%E6%8E%A5%E5%8F%A3%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/</id>
    <published>2022-07-25T09:30:02.000Z</published>
    <updated>2022-07-25T09:31:44.249Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interface-and-abstract-class"><a href="#Interface-and-abstract-class" class="headerlink" title="Interface and abstract class"></a><code>Interface</code> and <code>abstract class</code></h2><h2 id="为什么Java中要引入接口的概念呢？为什么不直接设计成抽象类中全是抽象方法呢？"><a href="#为什么Java中要引入接口的概念呢？为什么不直接设计成抽象类中全是抽象方法呢？" class="headerlink" title="为什么Java中要引入接口的概念呢？为什么不直接设计成抽象类中全是抽象方法呢？"></a>为什么Java中要引入接口的概念呢？为什么不直接设计成抽象类中全是抽象方法呢？</h2><p>使用抽象类表示通用属性存在一个很严重的问题：</p><p>每个类只能扩展一个类。</p><p>Java是不支持多重继承的，但是<strong>每个类可以实现多个接口。</strong></p><blockquote><p>有些编程语言中允许一个类有多个父类（C++），我们将这个特性称为多重继承。</p><p>Java不支持多重继承，主要原因是多重继承会让语言变的非常复杂（如同C++），或者效率会降低（如同Eiffel）。</p></blockquote><p><strong>实际上，接口可以提供多重继承的大多数好处，同时还能避免多重继承的复杂性和低效性。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Interface-and-abstract-class&quot;&gt;&lt;a href=&quot;#Interface-and-abstract-class&quot; class=&quot;headerlink&quot; title=&quot;Interface and abstract class&quot;&gt;&lt;/a&gt;&lt;c</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
    <category term="面试题" scheme="https://zhangqinc.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>对象包装器与自动装箱</title>
    <link href="https://zhangqinc.github.io/2022/07/24/autoboxing/"/>
    <id>https://zhangqinc.github.io/2022/07/24/autoboxing/</id>
    <published>2022-07-24T11:38:27.000Z</published>
    <updated>2022-08-06T02:03:42.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象包装器与自动装箱"><a href="#对象包装器与自动装箱" class="headerlink" title="对象包装器与自动装箱"></a>对象包装器与自动装箱</h1><blockquote><p>Java是一门非常纯粹的面向对象的编程语言,其设计理念是“一切皆对象”。<strong>但8种基本数据类型却不具备对象的特性。</strong>据说Java之所以提供8种基本数据类型,主要是为了照顾程序员的传统习惯。这8种基本数据类型的确带来了一定的方便性,但在某些时候也会受到一些制约。比如,所有的引用类型的变量都继承于Object类,都可以当做Object类型的变量使用,但基本数据类型却不可以。<strong>如果某个方法需要Object类型的参数</strong>,但实际需要传入的值却是数字的话,就需要做特殊的处理了。</p></blockquote><p>这时我们需要将int这样的基本类型转换为对象。所有的基本类型都有一个与之对应的类。</p><p>eg： <code>Integer</code> 类对应基本类型为<code>int</code>。通常，这些与基本类型对应的类称为包装器（wrapper）。</p><p><strong>包装器是不可变的，即一旦构造了包装器，就不允许更改包装在其中的值。</strong></p><p>同时，包装器类还是<code>final</code>，因此不能派生它们的子类。</p><blockquote><p>假设我们想要定义一个整型数组列表。但是尖括号中的类型参数不允许是基本类型，<code>ArrayList&lt;int&gt;</code>是不允许的。这时我们就可以用到Integer包装器类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br></pre></td></tr></table></figure></blockquote><p>这样，我们在向list中添加数据时，就应该添加<code>Integer</code>对象，但是，Java中有一个很有用的特性，<strong>可以很简单的向<code>ArrayList&lt;Integer&gt;</code>中添加int类型的元素</strong>；</p><p>让</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>自动的变换成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.add(Integer.valueOf(<span class="number">3</span>));</span><br></pre></td></tr></table></figure><p>这种变换称为<strong>自动装箱(autoboxing)</strong></p><blockquote><p>“装箱”（boxing）这个词来源于C#</p></blockquote><p>相反的，当将一个<code>Integer</code>对象赋给一个int值时，将会<strong>自动的拆箱。</strong></p><p>也就是说，<strong>编译器</strong>将以下语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.get(i)</span><br></pre></td></tr></table></figure><p>转换成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> list.get(i).intValue();</span><br></pre></td></tr></table></figure><h2 id="自动的装箱与拆箱也适用于算术表达式。"><a href="#自动的装箱与拆箱也适用于算术表达式。" class="headerlink" title="自动的装箱与拆箱也适用于算术表达式。"></a>自动的装箱与拆箱也适用于算术表达式。</h2><p>例如自增运算符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer n = 3;</span><br><span class="line">n++; // 编译器自动插入一条对象拆箱的指令，运算完成后再装箱。</span><br></pre></td></tr></table></figure><p>大多数情况下容易有一种假象，认为基本类型与它们的对象包装器是一样的。但它们有一点有很大不同：同一性。</p><p>​&#x3D;&#x3D; 运算符运用于对象时检测的是对象是否有相同的内存位置。</p><ul><li>不同包装类不能直接进行比较不能用&#x3D;&#x3D;进行直接比较。</li><li>不能使用<code>compareTo</code>方法进行比较,虽然它们都有<code>compareTo</code>方法,但该方法只能对相同类型进行比较</li></ul><p>所以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">if</span>(a == b)...</span><br><span class="line">    <span class="comment">//此语句通常会失败；</span></span><br></pre></td></tr></table></figure><h2 id="自动装箱规范要求"><a href="#自动装箱规范要求" class="headerlink" title="自动装箱规范要求"></a>自动装箱规范要求</h2><blockquote><p><code>boolean、byte、char &lt;= 127</code></p><p>介于-128和127之间的short和int被包装到固定的对象中。</p><p>即如果在此范围内的short&#x2F;int值的&#x3D;&#x3D;运算比较结果一定成功。</p></blockquote><h2 id="自动装箱注意的点："><a href="#自动装箱注意的点：" class="headerlink" title="自动装箱注意的点："></a>自动装箱注意的点：</h2><ol><li><p>包装器类引用可以为<code>null</code>，若没有值，则可能会<code>NullPointerException</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">System.out.println(<span class="number">2</span>*n); <span class="comment">// throws NullPointerException</span></span><br></pre></td></tr></table></figure></li><li><p>若在一个条件表达式中混合使用<code>Integer</code>和<code>Double</code>类型，<code>Integer</code>值就会拆箱，提升转换为<code>double</code>，再装箱为<code>Double</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Integer</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="type">Double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2.0</span>;</span><br><span class="line">System.out.println(<span class="literal">true</span>? n : x);</span><br><span class="line"><span class="comment">// prints 1.0</span></span><br></pre></td></tr></table></figure></li><li><p>装箱和拆箱是编译器要做的工作，而不是虚拟机。</p><p>编译器在生成类的字节码文件时就会插入必要的方法调用（自动的拆箱和装箱），虚拟机只是执行这些代码。</p></li></ol><hr><p>使用数值包装器通常还有一个原因：<strong>可以将某些基本方法放在包装器中，会很方便</strong>—&gt; API文档。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将一个数字字符串转换成数值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> Integer.parseInt(s);</span><br><span class="line"><span class="comment">// 这里，parseInt与Integer对象没关系，它是一个static静态方法(工具方法)，只是Integer类是一个放它的好地方。</span></span><br></pre></td></tr></table></figure><p>其它数值类也实现了一些有用的方法。</p><hr><blockquote><p>Warning:</p><p>有些人认为包装器类可以用来实现修改数值参数的方法，然而这是错误的。</p><p>Java方法的参数总是按值传递，所以不可能编写一个能够增加整型参数值的Java方法。</p><p>因为Integer对象是<strong>不可变的</strong>，包含在包装器中的内容不会改变。不能使用这些包装器类创建会修改数值参数的方法。</p><blockquote><p>如果确实向别写一个修改数值参数值的方法，可以使用<code>org.omg.CORBA</code>包中定义的某个持有者（holder）类型，包括<code>IntHolder</code>、<code>BooleanHolder</code>等。</p></blockquote></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对象包装器与自动装箱&quot;&gt;&lt;a href=&quot;#对象包装器与自动装箱&quot; class=&quot;headerlink&quot; title=&quot;对象包装器与自动装箱&quot;&gt;&lt;/a&gt;对象包装器与自动装箱&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Java是一门非常纯粹的面向对象的编程语言,其设计</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
    <category term="面试题" scheme="https://zhangqinc.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="Core Java" scheme="https://zhangqinc.github.io/tags/Core-Java/"/>
    
  </entry>
  
  <entry>
    <title>Java中常用Class</title>
    <link href="https://zhangqinc.github.io/2022/07/24/Class/"/>
    <id>https://zhangqinc.github.io/2022/07/24/Class/</id>
    <published>2022-07-24T10:44:13.000Z</published>
    <updated>2022-07-25T10:07:32.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java中部分常用内置类"><a href="#Java中部分常用内置类" class="headerlink" title="Java中部分常用内置类"></a>Java中部分常用内置类</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Java中字符串属于对象，Java内置的String类来创建和操作字符串。</p><p>拼接字符串最常用的是+，而很少用String的concat方法。</p><h3 id="int-compareTo-String-anotherString"><a href="#int-compareTo-String-anotherString" class="headerlink" title="int compareTo(String  anotherString)"></a>int compareTo(String  anotherString)</h3><p>按照字符串顺序，比较两个字符串的不同。</p><h3 id="boolean-contains-CharSequence-cs"><a href="#boolean-contains-CharSequence-cs" class="headerlink" title="boolean contains(CharSequence cs)"></a>boolean contains(CharSequence cs)</h3><p>当字符串包含指定的char值序列时返回true。</p><h3 id="boolean-equals-Object-anObject"><a href="#boolean-equals-Object-anObject" class="headerlink" title="boolean equals(Object anObject)"></a>boolean equals(Object anObject)</h3><p>与指定对象比较，与String对象比较时比较字符串内容是否相同。</p><h3 id="int-indexOf-int-ch"><a href="#int-indexOf-int-ch" class="headerlink" title="int indexOf(int ch)"></a>int indexOf(int ch)</h3><p>返回字符串第一次出现指定字符的序列。</p><h3 id="int-lastIndexOf-int-ch"><a href="#int-lastIndexOf-int-ch" class="headerlink" title="int lastIndexOf(int ch)"></a>int lastIndexOf(int ch)</h3><p>从后往前遍历返回字符串第一次出现指定字符的序列。</p><h3 id="int-length"><a href="#int-length" class="headerlink" title="int length()"></a>int length()</h3><p>返回该字符串的长度。</p><h3 id="char-toCharArray"><a href="#char-toCharArray" class="headerlink" title="char[] toCharArray()"></a>char[] toCharArray()</h3><p>将此字符串转换为一个char类型的数组返回。</p><hr><p>更多详细内容请见：<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#">https://docs.oracle.com/javase/9/docs/api/java/lang/String.html#</a></p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>此类用于生成随机数。</p><h3 id="int-nextInt"><a href="#int-nextInt" class="headerlink" title="int nextInt()"></a>int nextInt()</h3><p>返回一个int型的伪随机数。</p><h3 id="int-nextInt-int-bound"><a href="#int-nextInt-int-bound" class="headerlink" title="int nextInt(int bound)"></a>int nextInt(int bound)</h3><p>返回一个0到指定范围（不包括）内的随机int值。</p><h3 id="float-nextFloat"><a href="#float-nextFloat" class="headerlink" title="float nextFloat()"></a>float nextFloat()</h3><h3 id="double-nextDouble"><a href="#double-nextDouble" class="headerlink" title="double nextDouble()"></a>double nextDouble()</h3><h3 id="long-nextLong"><a href="#long-nextLong" class="headerlink" title="long nextLong()"></a>long nextLong()</h3><hr><p>更多详情请见：<a href="https://docs.oracle.com/javase/9/docs/api/java/util/Random.html">https://docs.oracle.com/javase/9/docs/api/java/util/Random.html</a></p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>Math 类包含执行基本数值运算的方法，例如初等指数、对数、平方根和三角函数。</p><p>Math类中的方法都为 static ，所以可直接调用，而不用创建对象。</p><h3 id="static-int-abs-int-a"><a href="#static-int-abs-int-a" class="headerlink" title="static int abs(int a)"></a>static int abs(int a)</h3><p>返回int类型值的绝对值</p><h3 id="static-double-abs-int-a"><a href="#static-double-abs-int-a" class="headerlink" title="static double abs(int a)"></a>static double abs(int a)</h3><p>…</p><h3 id="static-int-max-int-a-int-b"><a href="#static-int-max-int-a-int-b" class="headerlink" title="static int max(int a, int b)"></a>static int max(int a, int b)</h3><p>返回两个int值中更大的一个</p><p>…</p><h3 id="static-int-min-int-a-int-b"><a href="#static-int-min-int-a-int-b" class="headerlink" title="static int min(int a, int b)"></a>static int min(int a, int b)</h3><p>返回两个int值中更大的一个</p><p>…</p><h3 id="static-double-pow-double-a-double-b"><a href="#static-double-pow-double-a-double-b" class="headerlink" title="static double pow(double a, double b)"></a>static double pow(double a, double b)</h3><p>返回第一个参数的第二个参数次幂的值。</p><p>…</p><hr><p>更多详细方法详见：<a href="https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html">https://docs.oracle.com/javase/9/docs/api/java/lang/Math.html</a></p><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><p>Scanner是一个简单的文本扫描器。</p><p>简单的使用方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sc.nextInt();</span><br></pre></td></tr></table></figure><h3 id="int-nextInt-1"><a href="#int-nextInt-1" class="headerlink" title="int nextInt()"></a>int nextInt()</h3><p>将输入的下一个标记扫描为 int。</p><hr><p>更多细节方法内容见:<a href="https://docs.oracle.com/javase/9/docs/api/java/util/Scanner.html">https://docs.oracle.com/javase/9/docs/api/java/util/Scanner.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Java中部分常用内置类&quot;&gt;&lt;a href=&quot;#Java中部分常用内置类&quot; class=&quot;headerlink&quot; title=&quot;Java中部分常用内置类&quot;&gt;&lt;/a&gt;Java中部分常用内置类&lt;/h1&gt;&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot;</summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Array</title>
    <link href="https://zhangqinc.github.io/2022/07/23/Array/"/>
    <id>https://zhangqinc.github.io/2022/07/23/Array/</id>
    <published>2022-07-23T07:49:06.000Z</published>
    <updated>2022-07-25T10:07:17.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>​数组存储相同类型值的序列。</p><p>​数组是一种数据结构，用来存储同一类型值的集合。</p><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><p>通过一个整型下标（index）或者称为索引，可以访问数组中的每一个值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如： 如果 a 是一个整型数组（int[]）,</span><br><span class="line">  a[i] 即为数组中下标为i的整数。</span><br></pre></td></tr></table></figure><p>声明数组时需要指出数组类型(数据元素类型后紧跟 [] )以及数组名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] a;</span><br></pre></td></tr></table></figure><p>上述语句只声明了一个变量a，并没有将它真正初始化为一个数组，应该用new操作符创建数组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">100</span>];</span><br><span class="line"><span class="comment">// 此语句声明并初始化了一个可以存储100个int型数据元素的数组。</span></span><br><span class="line"><span class="comment">//即声明格式为:</span></span><br><span class="line"><span class="comment">//数据类型[] 变量名 = new 数据类型[数组长度]</span></span><br></pre></td></tr></table></figure><blockquote><p>定义一个数组变量有两种方法：</p><p>int[] a;</p><p>int a[];</p><p>这里建议用第一种，因为它更加清晰更容易理解，它将变量名和数据类型分开</p></blockquote><ul><li>数组长度不要求是常量，即也可为变量。</li><li>一旦创建了数组，它的长度就固定了，不能再做改变，</li><li>数组元素的值可以任意改变</li></ul><blockquote><p>程序运行中需要经常扩展数组的大小，这时我们可以声明一个新的更大的数组，再将需要扩展的数组的元素拷贝到新的数组。</p><p>但是当需要扩展数组大小时我们应该使用另一种数据结构——数组列表（array list）</p></blockquote><p>Java中，提供了叶子红创建数组对象并为其提供初始值的简写形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="comment">// 此语法不需要new，甚至不需要指定数组长度。</span></span><br><span class="line"><span class="comment">// 最后一个值后面允许有逗号。</span></span><br></pre></td></tr></table></figure><p>注：数组允许重新初始化。</p><h2 id="访问数组元素"><a href="#访问数组元素" class="headerlink" title="访问数组元素"></a>访问数组元素</h2><p><code>int[] a = new int[100]</code></p><p>此数组的下标是 0-99，而不是 1-100。</p><p><strong>创建一个数组时：</strong></p><ul><li>所有元素都会被初始化为0</li><li>boolean 数组的元素会被初始化为 false</li><li>对象数组的元素会被初始化为null，表示这些元素还未存放任何对象。</li></ul><blockquote><p>注：如果试图访问数组范围以外的数据<code>eg: a[100]</code>,即越界，就会引发“array index out of bounds”异常。</p></blockquote><p>要获取数组长度可以使用<code>array.length</code>。</p><h2 id="for-each-循环"><a href="#for-each-循环" class="headerlink" title="for each 循环"></a>for each 循环</h2><p><code>for each</code>是Java中一种功能很强的循环结构，额可以用来依次处理数组或者其他元素集合中的每一个值，而<strong>不用去考虑下标值</strong>。</p><p>增强for循环的语句格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (variable : collection) statement</span><br></pre></td></tr></table></figure><p>for each 循环语句会遍历数组中的每一个元素</p><blockquote><p>当然，使用传统的for循环也能实现相同的效果</p><p>但是for each的代码更加简洁，不易出错， 你可以不必担心下标的起始问题。</p><p>当然，for each只适用于遍历数组的所有元素的情况。<strong>很多情况下仍要使用传统的for循环。</strong></p></blockquote><blockquote><p>利用Arrays类中的<code>toString</code>方法可以更加简单快速的打印数组中的所有元素。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h1&gt;&lt;p&gt;​	数组存储相同类型值的序列。&lt;/p&gt;
&lt;p&gt;​	数组是一种数据结构，用来存储同一类型值的集合。&lt;/p&gt;
&lt;h2 id=&quot;声明数组&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="Java SE" scheme="https://zhangqinc.github.io/categories/Java-SE/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zhangqinc.github.io/2022/07/23/hello-world/"/>
    <id>https://zhangqinc.github.io/2022/07/23/hello-world/</id>
    <published>2022-07-23T05:24:15.056Z</published>
    <updated>2022-07-23T05:24:15.056Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
